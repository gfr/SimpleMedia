<?php
/**
 * SimpleMedia.
 *
 * @copyright Axel Guckelsberger
 * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License
 * @package SimpleMedia
 * @author Axel Guckelsberger <info@guite.de>.
 * @link http://zikula.de
 * @link http://zikula.org
 * @version Generated by ModuleStudio 0.5.5 (http://modulestudio.de) at Sat Oct 27 20:20:22 CEST 2012.
 */

/**
 * Utility base class for list field entries related methods.
 */
class SimpleMedia_Util_Base_ListEntries extends Zikula_AbstractBase
{
    /**
     * Return the name or names for a given list item.
     *
     * @param string $value      The dropdown value to process.
     * @param string $objectType The treated object type.
     * @param string $fieldName  The list field's name.
     * @param string $delimiter  String used as separator for multiple selections.
     *
     * @return string List item name.
     */
    public function resolve($value, $objectType = '', $fieldName = '', $delimiter = ', ')
    {
        if (empty($value) || empty($objectType) || empty($fieldName)) {
            return $value;
        }

        $isMulti = $this->hasMultipleSelection($objectType, $fieldName);
        if ($isMulti === true) {
            $value = $this->extractMultiList($value);
        }

        $options = $this->getEntries($objectType, $fieldName);
        $result = '';

        if ($isMulti === true) {
            foreach ($options as $option) {
                if (!in_array($option['value'], $value)) {
                    continue;
                }
                if (!empty($result)) {
                    $result .= $delimiter;
                }
                $result .= $option['text'];
            }
        } else {
            foreach ($options as $option) {
                if ($option['value'] != $value) {
                    continue;
                }
                $result = $option['text'];
                break;
            }
        }

        return $result;
    }

    /**
     * Extract concatenated multi selection.
     *
     * @param string  $value The dropdown value to process.
     *
     * @return array List of single values.
     */
    public function extractMultiList($value)
    {
        $listValues = explode('###', $value);
        $numValues = count($listValues);
        if ($numValues > 1 && $listValues[$numValues-1] == '') {
            unset($listValues[$numValues-1]);
        }
        if ($listValues[0] == '') {
            unset($listValues[0]);
        }
        return $listValues;
    }

    /**
     * Determine whether a certain dropdown field has a multi selection or not.
     *
     * @param string $objectType The treated object type.
     * @param string $fieldName  The list field's name.
     *
     * @return boolean True if this is a multi list false otherwise.
     */
    public function hasMultipleSelection($objectType, $fieldName)
    {
        if (empty($objectType) || empty($fieldName)) {
            return false;
        }

        $result = false;
        switch ($objectType) {
            case 'medium':
                switch ($fieldName) {
                    case 'mediaType':
                        $result = false;
                        break;
                }
                break;
        }

        return $result;
    }

    /**
     * Get entries for a certain dropdown field.
     *
     * @param string  $objectType The treated object type.
     * @param string  $fieldName  The list field's name.
     *
     * @return array Array with desired list entries.
     */
    public function getEntries($objectType, $fieldName)
    {
        if (empty($objectType) || empty($fieldName)) {
            return array();
        }

        $entries = array();
        switch ($objectType) {
            case 'medium':
                switch ($fieldName) {
                    case 'mediaType':
                        $entries = $this->getMediaTypeEntriesForMedium();
                        break;
                }
                break;
        }

        return $entries;
    }

    /**
     * Get 'media type' list entries.
     *
     * @return array Array with desired list entries.
     */
    public function getMediaTypeEntriesForMedium()
    {
        $states = array();
        $dom = ZLanguage::getModuleDomain('SimpleMedia');
        $states[] = array('value' => 'image',
                          'text'  => __('Image', $dom),
                          'title' => '',
                          'image' => '');
        $states[] = array('value' => 'movie',
                          'text'  => __('Movie', $dom),
                          'title' => '',
                          'image' => '');
        $states[] = array('value' => 'audio',
                          'text'  => __('Audio', $dom),
                          'title' => '',
                          'image' => '');
        $states[] = array('value' => 'text',
                          'text'  => __('Text', $dom),
                          'title' => '',
                          'image' => '');
        $states[] = array('value' => 'other',
                          'text'  => __('Other', $dom),
                          'title' => '',
                          'image' => '');
        return $states;
    }
}
