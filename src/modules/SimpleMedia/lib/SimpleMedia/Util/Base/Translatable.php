<?php
/**
 * SimpleMedia.
 *
 * @copyright Axel Guckelsberger
 * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License
 * @package SimpleMedia
 * @author Axel Guckelsberger <info@guite.de>.
 * @link http://zikula.de
 * @link http://zikula.org
 * @version Generated by ModuleStudio 0.5.5 (http://modulestudio.de) at Mon Nov 05 23:27:05 CET 2012.
 */

/**
 * Utility base class for translatable helper methods.
 */
class SimpleMedia_Util_Base_Translatable extends Zikula_AbstractBase
{
    /**
     * Return list of translatable fields per entity.
     * These are required to be determined to recognize
     * that they have to be selected from according translation tables.
     *
     * @param string $objectType The currently treated object type.
     *
     * @return array list of translatable fields
     */
    public function getTranslatableFields($objectType)
    {
        $dom = ZLanguage::getModuleDomain('SimpleMedia');
        $fields = array();
        switch ($objectType) {
            case 'medium':
                $fields = array(
                    array('name' => 'title',
                          'default' => __('Title', $dom)),array('name' => 'description',
                          'default' => __('Description', $dom))
                    
                );
                break;
            case 'collection':
                $fields = array(
                    array('name' => 'title',
                          'default' => __('Title', $dom)),array('name' => 'description',
                          'default' => __('Description', $dom))
                    
                );
                break;
        }
        return $fields;
    }

    /**
     * Post-processing method copying all translations to corresponding arrays.
     * This ensures easy compatibility to the Forms plugins where it
     * it is not possible yet to define sub arrays in the group attribute.
     *
     * @param string              $objectType The currently treated object type.
     * @param Zikula_EntityAccess $entity     The entity being edited.
     *
     * @return array collected translations having the locales as keys
     */
    public function prepareEntityForEdit($objectType, $entity)
    {
        $translations = array();

        // check arguments
        if (!$objectType || !$entity) {
            return $translations;
        }

        // check if we have translated fields registered for the given object type
        $fields = $this->getTranslatableFields($objectType);
        if (!count($fields)) {
            return $translations;
        }

        if (System::getVar('multilingual') != 1) {
            // Translatable extension did already fetch current translation
            return $translations;
        }

        // prepare form data to edit multiple translations at once
        $serviceManager = ServiceUtil::getManager();
        $entityManager = $serviceManager->getService('doctrine.entitymanager');

        // get translations
        $repository = $entityManager->getRepository('SimpleMedia_Entity_' . ucwords($objectType) . 'Translation');
        $entityTranslations = $repository->findTranslations($entity);

        $supportedLocales = ZLanguage::getInstalledLanguages();
        $currentLanguage = ZLanguage::getLanguageCode();
        foreach ($supportedLocales as $locale) {
            if ($locale == $currentLanguage) {
                // Translatable extension did already fetch current translation
                continue;
            }
            $translationData = array();
            foreach ($fields as $field) {
                $translationData[$field['name'] . $locale] = isset($entityTranslations[$locale]) ? $entityTranslations[$locale][$field['name']] : '';
            }
            // add data to collected translations
            $translations[$locale] = $translationData;
        }

        return $translations;
    }

    /**
     * Post-editing method copying all translated fields back to their subarrays.
     * This ensures easy compatibility to the Forms plugins where it
     * it is not possible yet to define sub arrays in the group attribute.
     *
     * @param string $objectType The currently treated object type.
     * @param array  $formData   Form data containing translations.
     *
     * @return array collected translations having the locales as keys
     */
    public function processEntityAfterEdit($objectType, $formData)
    {
        $translations = array();
        // check arguments
        if (!$objectType || !is_array($formData)) {
            return $translations;
        }

        $fields = $this->getTranslatableFields($objectType);
        if (!count($fields)) {
            return $translations;
        }

        $supportedLocales = ZLanguage::getInstalledLanguages();
        $useOnlyCurrentLocale = true;
        if (System::getVar('multilingual') == 1) {
            $useOnlyCurrentLocale = false;
            $currentLanguage = ZLanguage::getLanguageCode();
            foreach ($supportedLocales as $locale) {
                if ($locale == $currentLanguage) {
                    // skip current language as this is not treated as translation on controller level
                    continue;
                }
                $translations[$locale] = array('locale' => $locale, 'fields' => array());
                $translationData = $formData[strtolower($objectType) . $locale];
                foreach ($fields as $field) {
                    $translations[$locale]['fields'][$field['name']] = isset($translationData[$field['name'] . $locale]) ? $translationData[$field['name'] . $locale] : '';
                    unset($formData[$field['name'] . $locale]);
                }
            }
        }
        if ($useOnlyCurrentLocale === true) {
            $locale = ZLanguage::getLanguageCode();
            $translations[$locale] = array('locale' => $locale, 'fields' => array());
            $translationData = $formData[strtolower($objectType) . $locale];
            foreach ($fields as $field) {
                $translations[$locale]['fields'][$field['name']] = isset($translationData[$field['name'] . $locale]) ? $translationData[$field['name'] . $locale] : '';
                unset($formData[$field['name'] . $locale]);
            }
        }
        return $translations;
    }
}
