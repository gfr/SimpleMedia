<?php
/**
 * SimpleMedia.
 *
 * @copyright Axel Guckelsberger
 * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License
 * @package SimpleMedia
 * @author Axel Guckelsberger <info@guite.de>.
 * @link http://zikula.de
 * @link http://zikula.org
 * @version Generated by ModuleStudio 0.5.5 (http://modulestudio.de) at Sat Oct 27 20:20:22 CEST 2012.
 */

/**
 * Utility implementation class for controller helper methods.
 */
class SimpleMedia_Util_Controller extends SimpleMedia_Util_Base_Controller
{
    // feel free to add your own convenience methods here

    /**
     * Retrieve the base path for given object type and upload field combination.
     *
     * @param string $objectType Name of treated entity type.
     * @param string $fieldName  Name of upload field.
     *
     * @return mixed Output.
     * @throws Exception if invalid object type is given.
     */
    public function getFileBaseFolder($objectType, $fieldName)
    {
        if (!in_array($objectType, $this->getObjectTypes())) {
            throw new Exception('Error! Invalid object type received.');
        }

        $basePath = FileUtil::getDataDirectory() . '/SimpleMedia/';

        switch ($objectType) {
            case 'medium':
                $basePath .= $this->getVar('mediaDir') . '/';
            break;
        }

        return $basePath;
    }

    /**
     * Creates upload folder and tmb subfolder as well as an .htaccess file within it.
     *
     * @param string $objectType        Name of treated entity type.
     * @param string $fieldName         Name of upload field.
     * @param string $allowedExtensions String with list of allowed file extensions (separated by ", ").
     * @param string $thumbDir          Name of the thumbnail subdirectory
     *
     * @return Boolean whether everything went okay or not.
     */
    public function checkAndCreateUploadFolder($objectType, $fieldName, $allowedExtensions = '', $thumbDir = 'tmb/')
    {
        $dom = ZLanguage::getModuleDomain('SimpleMedia');
        $uploadPath = $this->getFileBaseFolder($objectType, $fieldName);

        // Check if directory exist and try to create it if needed
        if (!is_dir($uploadPath) && !FileUtil::mkdirs($uploadPath, 0777)) {
            LogUtil::registerStatus(__f('The upload directory "%s" does not exist and could not be created. Try to create it yourself and make sure that this folder is accessible via the web and writable by the webserver.', array($uploadPath), $dom));
            return false;
        }

        // Check if directory is writable and change permissions if needed
        if (!is_writable($uploadPath) && !chmod($uploadPath, 0777)) {
            LogUtil::registerStatus(__f('Warning! The upload directory at "%s" exists but is not writable by the webserver.', array($uploadPath), $dom));
            return false;
        }

        $thumbPath = $uploadPath . $thumbDir;

        // Check if directory exist and try to create it if needed
        if (!is_dir($thumbPath) && !FileUtil::mkdirs($thumbPath, 0777)) {
            LogUtil::registerStatus(__f('Warning! The upload thumbnail directory "%s" does not exist and could not be created. Try to create it yourself and make sure that this folder is accessible via the web and writable by the webserver.', array($thumbPath), $dom));
            return false;
        }

        // Check if directory is writable and change permissions if needed
        if (!is_writable($thumbPath) && !chmod($thumbPath, 0777)) {
            LogUtil::registerStatus(__f('Warning! The upload thumbnail directory at "%s" exists but is not writable by the webserver.', array($thumbPath), $dom));
            return false;
        }

        // Write a htaccess file into the upload directory
        $htaccessFilePath = $uploadPath . '.htaccess';
        $htaccessFileTemplate = 'modules/SimpleMedia/docs/htaccessTemplate';
        if (!file_exists($htaccessFilePath) && file_exists($htaccessFileTemplate)) {
            $extensions = str_replace(',', '|', str_replace(' ', '', $allowedExtensions));
            $htaccessContent = str_replace('__EXTENSIONS__', $extensions, FileUtil::readFile($htaccessFileTemplate));
            if (!FileUtil::writeFile($htaccessFilePath, $htaccessContent)) {
                LogUtil::registerStatus(__f('Warning! Could not but could not write the .htaccess file at "%s".', array($htaccessFilePath), $dom));
                return false;
            }
        }

        return true;
    }
}
